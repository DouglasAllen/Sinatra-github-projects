%html
  %head
    %title true anomaly sun
  %body
    %h1
      &nu; or nu = True Anomaly = Mean Anomaly + Equation of Center
    %h3
      The True Anomaly of the Sun is a correction to the Mean Anomaly via a formula called the 'Equation of Center'.
      %br
      Since True Anomaly is just Mean Anomaly + Equation of Center, I will just show that Ruby method here.
      %br
      The Equation of Center is a sine series of the Mean Anomaly &Mu; or mu
    %h2
      These terms are calculated with the Universal Time Coordinate or GMT of the current time.
    %h3{:style => "color: #ff0000"}= "Time now UTC = #{Time.now.utc}"   
    %h3 The array value =
    %h3
      - if @solar
        %input{:style => "font-weight: bold; width :850px; color: #00a", :value => "    #{@solar.time_julian_century(@solar.ajd_time(Time.now.utc))}"}      
    %h3
      Ruby method:
      %pre
        :preserve

          def equation_of_center( t = time_julian_century( ) )
            mean_anomaly = mean_anomaly( t )            
            sine_mean_anomaly = sin( degrees_to_radians( mean_anomaly ))
            sine_2mean_anomaly = sin( 2.0 * degrees_to_radians( mean_anomaly ))
            sine_3mean_anomaly = sin( 3.0 * degrees_to_radians( mean_anomaly ))
            sine_mean_anomaly * ( 1.914602 - t[0] * ( t[0] * 0.000014 + 0.004817 )) +
            sine_2mean_anomaly * ( 0.019993 - t[0] * 0.000101 ) +
            sine_3mean_anomaly * 0.000289                                
          end

      - t = @solar.time_julian_century(@solar.ajd_time(Time.now.utc))
      - eqc = @solar.equation_of_center(t)
      - s_min = 4.0 * 360 / @solar.factor
      - eqcstring = @solar.degrees_to_s(eqc)
    %h3
      %input{:style => "font-weight: bold; width :300px; color: #00a", :value => "  #{eqc}"}/
      \= Equation of Center in decimal degrees.
    %h3
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{eqcstring}"}/
      \= degrees:minutes:seconds.
    %h3
      I used 4.0 * ( 1 - 100 / 36525.0 ) to get    			
    %h3
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{s_min}"}/
      \= minutes per degree in sidereal time    
    %h3
      Multiplying we get
    %h3 
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{s_min * eqc}"}/
      \= &Delta;t minutes decimal
    %h3
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{@solar.show_minutes(s_min * eqc)}"}/
      \= minutes:seconds
    - mean_anomaly = @solar.mean_anomaly(t)
    - true_anomaly = @solar.mean_anomaly(t) + eqc
    - e1 = (mean_anomaly - true_anomaly) * s_min
    %h3
      Remember we added Equation of Center to Mean Anomaly? 
      %br
      Here we need the difference for &Mu; - &nu;
      %br
      I only showed you equation_of_center( t ) method
      %br
      There is a method in EOT class that yields &nu; or True Anomaly that adds Equation of Center to Mean Anomaly 
      called by true_anomaly( t )
    %h3 &nu; = &Mu; - &Mu; - c
    %h3 
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{mean_anomaly - true_anomaly}"}/
      \= decimal degrees.
    %h3
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{s_min}"}/
      \= minutes per degree in sidereal time  
    %h3
      Multiplying we get  
    %h3 
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{e1}"}/
      \= &Delta;t decimal minutes in E1
    %h3
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{@solar.display_equation_of_time(e1)}"}/
      \= &Delta;t minutes:seconds in E1
    %h3
      %a{:href => "/ecliplong"} Ecliptic Longitude
