%html
  %head
    %title right_ascension
  %body
    %h1 &alpha; or alpha = Right Ascension of the Sun
    %h3
      Right Ascension is measured along the imaginary celestial equator starting from the
      First Point of Aries which is also known as the Vernal Exuinox. The ecliptic crosses the celestial
      equator two times a year. The Autumnal Equinox is the other crossing pont also known as the Ascending Node. These two points
      are also when the declination of the Sun is zero. Two other points along the ecliptic are the
      Solstices ( Summer and Winter ). The declination of the Sun is at maximum north or south during these times.
      
      Normally Right Ascension is measured in hours, minutes, and seconds from zero. In this case we need
      to take the difference in degrees from Lambda &lambda;. This is the Obliquity component ( &lambda; - &alpha; ) for the Equation of Time. The other was the eliptic Orbital component( &Mu; - &nu; ). The Right Ascension and Ecliptic Longitude form an angle at the cross over points we will refer to as &epsilon; Epsilon in the Ruby methods. The other two methods are &alpha; Alpha and &lambda; Lambda.
      
    %h2
      These terms are calculated with the Universal Time Coordinate or GMT of the current time.
    %h3{:style => "color: #ff0000"}= "Time now UTC = #{Time.now.utc}"   
    - if @solar
      - ajd = @solar.ajd_time(Time.now.utc)
      - t = @solar.time_julian_century(ajd)
      - s_min = 4.0 * 360 / @solar.factor
      - mo = @solar.mean_obliquity(t)
      - to = @solar.true_obliquity(t)
      - tl = @solar.true_longitude(t)
      - ra = @solar.right_ascension(t)
      %h3 The array value =
      %h3
        %input{:style => "font-weight: bold; width :850px; color: #00a", :value => "    #{t}"}        
    %h3
      Ruby method:
      %pre
        :preserve
          def mean_obliquity( t = time_julian_century( ) )
            t.nil? ? t = time_julian_century( ) : t
            23.43927944 -
            t[0] / 76.863 -
            t[1] * 5.086e-8 +
            t[2] * 0.0000005565 +
            t[3] * 0.00000000016 -
            t[4] * 9.444e-13      
          end        
          
    %h3
      %input{:style => "font-weight: bold; color: #00a", :value => "  #{mo}"}/
      \: &epsilon;0 = Mean Epsilon ( Earth's tilt ) decimal degrees
    %h3
      Next we need some corrections for Nutation.
      %br
      The data is loaded when the EOT module is initialized.
      %br
      Also initialization will set all attributes except data to nill.
      %br
      So you may use it if you need to clear them.
      %br
      Ruby method:
    %h3  
      %pre
        :preserve
          def delta_equinox( t = time_julian_century( ) )
            t.nil? ? t = time_julian_century( ) : t
            # Values are in arc seconds see below for definitions of terms
            ma_moon = 485868.249036 + 1717915923.2178 * t[0] + 31.8792 * t[1] + 0.051635 * t[2] - 0.00024470 * t[3]
            ma_sun = 1287104.79305 + 129596581.0481 * t[0] - 0.5532 * t[1] + 0.000136 * t[2] - 0.00001149 * t[3]
            md_moon = 335779.526232 + 1739527262.8478 * t[0] - 12.7512 * t[1] - 0.001037 * t[2] + 0.00000417 * t[3]
            me_moon = 1072260.70369 + 1602961601.2090 * t[0] - 6.3706 * t[1] + 0.006593 * t[2] - 0.00003169 * t[3]
            omega = 450160.398036 - 6962890.5431 * t[0] + 7.4722 * t[1] + 0.007702 * t[2] - 0.00005939 * t[3]

            # declare and clear these two variables for the sigma loop. Note we're now using the data array. 
            delta_psi, delta_eps = 0, 0
            lines = data.size - 1
            for i in 0..lines
              fma_moon  = data[i][10].to_i
              fma_sun    = data[i][11].to_i
              fmd_moon  = data[i][12].to_i
              fme_moon  = data[i][13].to_i
              fomega      = data[i][14].to_i
              sine = sind( fma_moon * ma_moon +
                            fma_sun * ma_sun +
                          fmd_moon * md_moon +
                          fme_moon * me_moon +
                          fomega * omega )
              cosine = cosd( fma_moon * ma_moon +
                              fma_sun * ma_sun +
                            fmd_moon * md_moon +
                            fme_moon * me_moon +
                              fomega * omega )
              delta_psi += ( data[i][15].to_f +
                data[i][16].to_f * t[0] ) * sine +
                data[i][17].to_f * cosine
              
              delta_eps += ( data[i][18].to_f +
                data[i][19].to_f * t[0] ) * cosine +         
                data[i][20].to_f  * sine                      
            end

            delta_eps = to_deg( delta_eps ) * ARCSEC
            delta_psi = to_deg( delta_psi ) * ARCSEC
            [delta_eps,  delta_psi]   
          end
          
      %h3
        Ruby method:
        %pre
          :preserve
            def delta_epsilon( t = time_julian_century( ) )
              delta_equinox( t )[0]
            end

            def true_obliquity( t = time_julian_century( ) )
              mean_obliquity( t ) + delta_epsilon( t ) / ARCSEC
            end
            
      %h3        
        %input{:style => "font-weight: bold; color: #00a", :value => "  #{to}"}/
        \: &epsilon; = Epsilon ( Earth's tilt ) decimal dgrees
      %h3 Note: A slight change. Very small though.  
      %h3 Now we may calculate Right Ascension
      %h3
        Ruby method:
      %h3
        %pre
          :preserve
            def right_ascension( t = time_julian_century( ) )             
              y0 = cosine_true_obliquity( t ) * 
                   sine_true_longitude( t )
              x0 = cosine_true_longitude( t )
              radians_to_degrees( atan2( -y0, -x0 )) + 180.0
            end
      %h3
        %input{:style => "font-weight: bold; color: #00a", :value => "  #{tl}"}/
        \: True Ecliptic Longitude of the Sun decimal degrees
        %br
        %br
        minus
      %h3         
        %input{:style => "font-weight: bold; color: #00a", :value => "  #{ra}"}/
        \: &alpha; Right Ascension decimal degrees
        %br
        %br
        equal
      %h3
        %input{:style => "font-weight: bold; color: #00a", :value => "  #{tl - ra}"}/
        \: &Delta; degress. (&lambda; - &alpha;) decimal degrees      
      %h3
        %input{:style => "font-weight: bold; color: #00a", :value => "  #{s_min}"}/
        \= minutes per degree sidereal time and multiplying we get
      %h3
        %input{:style => "font-weight: bold; color: #00a", :value => "  #{s_min * (tl - ra)}"}/
        \: &Delta; time (&lambda; - &alpha;) decimal minutes
      %h3
        %input{:style => "font-weight: bold; color: #00a", :value => "  #{@solar.display_equation_of_time(s_min * (tl - ra))}"}/
        \: &Delta; time minutes and seconds in E2
      %h3
        %a{:href => "/final"} Final Equation
